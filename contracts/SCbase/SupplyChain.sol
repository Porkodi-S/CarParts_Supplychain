pragma solidity >=0.4.24;

// inherited contracts
import '../SCcore/Ownable.sol';
import '../SCaccesscontrol/CarParts_ManufacturerRole.sol';
import '../SCaccesscontrol/CarParts_DistributorRole.sol';
import '../SCaccesscontrol/RetailerRole.sol';
import '../SCaccesscontrol/CustomerRole.sol';


// Define a contract 'Supplychain'
contract SupplyChain is Ownable,CarParts_ManufacturerRole,CarParts_DistributorRole,RetailerRole,CustomerRole {
  
  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => Txblocks) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    ProduceByCarParts_Manufacturer,         // 0
    ForSaleByCarParts_Manufacturer,         // 1
    PurchasedByCarParts_Distributor,  // 2
    ShippedByCarParts_Manufacturer,         // 3
    ReceivedByCarParts_Distributor,   // 4
    ProcessedByCarParts_Distributor,  // 5
    PackageByCarParts_Distributor,    // 6
    ForSaleByCarParts_Distributor,    // 7
    PurchasedByRetailer,     // 8
    ShippedByCarParts_Distributor,    // 9
    ReceivedByRetailer,      // 10
    ForSaleByRetailer,       // 11
    PurchasedByCustomer      // 12
    }


  State constant defaultState = State.ProduceByCarParts_Manufacturer;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;                    // Stock Keeping Unit (SKU)
    uint    upc;                    // Universal Product Code (UPC), generated by the CarParts_Manufacturer, goes on the package, can be verified by the Customer
    address ownerID;                // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originCarParts_ManufacturerID;         // Metamask-Ethereum address of the CarParts_Manufacturer // ADDED PAYABLE
    string  originFactoryName;         // CarParts_Manufacturer Name
    string  originFactoryInformation;  // CarParts_Manufacturer Information
    string  originFactoryLatitude;     // Factory Latitude
    string  originFactoryLongitude;    // Factory Longitude
    uint    productID;              // Product ID potentially a combination of upc + sku
    string  productNotes;           // Product Notes
    uint256 productDate;            // Product Date NOTE: MIGHT NEED TO CHANGE type
    uint    productPrice;           // Product Price
    //uint    productSplited;          // Parent carparts
    State   itemState;              // Product State as represented in the enum above
    address CarParts_distributorID;          // Metamask-Ethereum address of the CarParts_Distributor
    address retailerID;             // Metamask-Ethereum address of the Retailer
    address customerID;             // Metamask-Ethereum address of the Customer // ADDED payable
  }

// Block number stuct
  struct Txblocks {
    uint FTD; // blockCarParts_ManufacturerToCarParts_Distributor
    uint DTR; // blockCarParts_DistributorToRetailer
    uint RTC; // blockRetailerToCustomer
  }


event ProduceByCarParts_Manufacturer(uint upc);         //1
event ForSaleByCarParts_Manufacturer(uint upc);         //2
event PurchasedByCarParts_Distributor(uint upc);  //3
event ShippedByCarParts_Manufacturer(uint upc);         //4
event ReceivedByCarParts_Distributor(uint upc);   //5
event ProcessedByCarParts_Distributor(uint upc);  //6
event PackagedByCarParts_Distributor(uint upc);   //7
event ForSaleByCarParts_Distributor(uint upc);    //8
event PurchasedByRetailer(uint upc);     //9
event ShippedByCarParts_Distributor(uint upc);    //10
event ReceivedByRetailer(uint upc);      //11
event ForSaleByRetailer(uint upc);       //12
event PurchasedByCustomer(uint upc);     //13


  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc, address payable addressToFund) {
    uint _price = items[_upc].productPrice;
    uint  amountToReturn = msg.value - _price;
    addressToFund.transfer(amountToReturn);
    _;
  }

//Item State Modifiers
  modifier producedByCarParts_Manufacturer(uint _upc) {
    require(items[_upc].itemState == State.ProduceByCarParts_Manufacturer);
    _;
  }

  modifier forSaleByCarParts_Manufacturer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByCarParts_Manufacturer);
    _;
  }

  modifier purchasedByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByCarParts_Distributor);
    _;
  }

  modifier shippedByCarParts_Manufacturer(uint _upc) {
    require(items[_upc].itemState == State.ShippedByCarParts_Manufacturer);
    _;
  }

  modifier receivedByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByCarParts_Distributor);
    _;
  }

  modifier processByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.ProcessedByCarParts_Distributor);
    _;
  }

  modifier packagedByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.PackageByCarParts_Distributor);
    _;
  }

  modifier forSaleByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByCarParts_Distributor);
    _;
  }


  modifier shippedByCarParts_Distributor(uint _upc) {
    require(items[_upc].itemState == State.ShippedByCarParts_Distributor);
    _;
  }

  modifier purchasedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByRetailer);
    _;
  }

  modifier receivedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByRetailer);
    _;
  }

  modifier forSaleByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByRetailer);
    _;
  }

  modifier purchasedByCustomer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByCustomer);
    _;
  }

// constructor setup owner sku upc
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

    // Define a function 'kill'
  function kill() public {
    if (msg.sender == owner) {
      address payable ownerAddressPayable = _make_payable(owner);
      selfdestruct(ownerAddressPayable);
    }
  }


    // allows you to convert an address into a payable address
  function _make_payable(address x) internal pure returns (address payable) {
      return address(uint160(x));
  }

/*
 1st step in supplychain
 Allows CarParts_Manufacturer to create carparts
*/
  function produceItemByCarParts_Manufacturer(uint _upc, string memory _originFactoryName, string memory _originFactoryInformation, string memory _originFactoryLatitude, string memory _originFactoryLongitude, string memory _productNotes, uint _price) public
    onlyCarParts_Manufacturer() // check address belongs to CarParts_ManufacturerRole
    {

    address CarParts_distributorID; // Empty CarParts_distributorID address
    address retailerID; // Empty retailerID address
    address customerID; // Empty customerID address
    Item memory newProduce; // Create a new struct Item in memory
    newProduce.sku = sku;  // Stock Keeping Unit (SKU)
    newProduce.upc = _upc; // Universal Product Code (UPC), generated by the CarParts_Manufacturer, goes on the package, can be verified by the Customer
    newProduce.ownerID = msg.sender;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    newProduce.originCarParts_ManufacturerID = msg.sender; // Metamask-Ethereum address of the CarParts_Manufacturer
    newProduce.originFactoryName = _originFactoryName;  // CarParts_Manufacturer Name
    newProduce.originFactoryInformation = _originFactoryInformation; // CarParts_Manufacturer Information
    newProduce.originFactoryLatitude = _originFactoryLatitude; // Factory Latitude
    newProduce.originFactoryLongitude = _originFactoryLongitude;  // Factory Longitude
    newProduce.productID = _upc+sku;  // Product ID
    newProduce.productNotes = _productNotes; // Product Notes
    newProduce.productPrice = _price;  // Product Price
    newProduce.productDate = now;
    //newProduce.productSplited = 0;
    newProduce.itemState = defaultState; // Product State as represented in the enum above
    newProduce.CarParts_distributorID = CarParts_distributorID; // Metamask-Ethereum address of the CarParts_Distributor
    newProduce.retailerID = retailerID; // Metamask-Ethereum address of the Retailer
    newProduce.customerID = customerID; // Metamask-Ethereum address of the Customer // ADDED payable
    items[_upc] = newProduce; // Add newProduce to items struct by upc
    uint placeholder; // Block number place holder
    Txblocks memory txBlock; // create new txBlock struct
    txBlock.FTD = placeholder; // assign placeholder values
    txBlock.DTR = placeholder;
    txBlock.RTC = placeholder;
    itemsHistory[_upc] = txBlock; // add txBlock to itemsHistory mapping by upc

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit ProduceByCarParts_Manufacturer(_upc);

  }

/*
2nd step in supplychain
Allows CarParts_Manufacturer to sell carparts
*/
  function sellItemByCarParts_Manufacturer(uint _upc, uint _price) public
    onlyCarParts_Manufacturer() // check msg.sender belongs to CarParts_ManufacturerRole
    producedByCarParts_Manufacturer(_upc) // check items state has been produced
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
      items[_upc].itemState = State.ForSaleByCarParts_Manufacturer;
      items[_upc].productPrice = _price;
      emit ForSaleByCarParts_Manufacturer(_upc);
  }

/*
3rd step in supplychain
Allows CarParts_distributor to purchase carparts
*/
  function purchaseItemByCarParts_Distributor(uint _upc) public payable
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_distributorRole
    forSaleByCarParts_Manufacturer(_upc) // check items state is for ForSaleByCarParts_Manufacturer
    paidEnough(items[_upc].productPrice) // check if CarParts_distributor sent enough Ether for carparts
    checkValue(_upc, msg.sender) // check if overpayed return remaing funds back to msg.sender
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].originCarParts_ManufacturerID); // make originFactoryID payable
    ownerAddressPayable.transfer(items[_upc].productPrice); // transfer funds from CarParts_distributor to CarParts_Manufacturer
    items[_upc].ownerID = msg.sender; // update owner
    items[_upc].CarParts_distributorID = msg.sender; // update CarParts_distributor
    items[_upc].itemState = State.PurchasedByCarParts_Distributor; // update state
    itemsHistory[_upc].FTD = block.number; // add block number
    emit PurchasedByCarParts_Distributor(_upc);

  }

  /*
  4th step in supplychain
  Allows CarParts_Manufacturer to ship carparts purchased by CarParts_distributor
  */
  function shippedItemByCarParts_Manufacturer(uint _upc) public payable
    onlyCarParts_Manufacturer() // check msg.sender belongs to CarParts_ManufacturerRole
    purchasedByCarParts_Distributor(_upc)
    verifyCaller(items[_upc].originCarParts_ManufacturerID) // check msg.sender is originFactoryID
    {
    items[_upc].itemState = State.ShippedByCarParts_Manufacturer; // update state
    emit ShippedByCarParts_Manufacturer(_upc);
  }

  /*
  5th step in supplychain
  Allows CarParts_distributor to receive carparts
  */
  function receivedItemByCarParts_Distributor(uint _upc) public
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_DistributorRole
    shippedByCarParts_Manufacturer(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.ReceivedByCarParts_Distributor; // update state
    emit ReceivedByCarParts_Distributor(_upc);
  }

  /*
  6th step in supplychain
  Allows CarParts_distributor to process carparts
  */
  function processedItemByCarParts_Distributor(uint _upc) public //(uint _upc,uint splits)
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_DistributorRole
    receivedByCarParts_Distributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.ProcessedByCarParts_Distributor; // update state
 //   items[_upc].productSplited = splits; // add split amount
    emit ProcessedByCarParts_Distributor(_upc);
  }

  /*
  7th step in supplychain
  Allows CarParts_distributor to package carparts
  */
  function packageItemByCarParts_Distributor(uint _upc) public
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_DistributorRole
    processByCarParts_Distributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.PackageByCarParts_Distributor;
    emit PackagedByCarParts_Distributor(_upc);
  }

  /*
  8th step in supplychain
  Allows CarParts_distributor to sell carparts
  */
  function sellItemByCarParts_Distributor(uint _upc, uint _price) public
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_DistributorRole
    packagedByCarParts_Distributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
        items[_upc].itemState = State.ForSaleByCarParts_Distributor;
        items[_upc].productPrice = _price;
        emit ForSaleByCarParts_Distributor(upc);
  }

  /*
  9th step in supplychain
  Allows retailer to purchase carparts
  */
  function purchaseItemByRetailer(uint _upc) public payable
    onlyRetailer() // check msg.sender belongs to RetailerRole
    forSaleByCarParts_Distributor(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc, msg.sender)
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].CarParts_distributorID);
    ownerAddressPayable.transfer(items[_upc].productPrice);
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.PurchasedByRetailer;
    itemsHistory[_upc].DTR = block.number;
    emit PurchasedByRetailer(_upc);
  }

  /*
  10th step in supplychain
  Allows CarParts_Distributor to ship carparts
  */
  function shippedItemByCarParts_Distributor(uint _upc) public
    onlyCarParts_Distributor() // check msg.sender belongs to CarParts_DistributorRole
    purchasedByRetailer(_upc)
    verifyCaller(items[_upc].CarParts_distributorID) // check msg.sender is CarParts_distributorID
    {
      items[_upc].itemState = State.ShippedByCarParts_Distributor;
      emit ShippedByCarParts_Distributor(_upc);
  }

  /*
  11th step in supplychain
  Allows Retailer to receieve carparts
  */
  function receivedItemByRetailer(uint _upc) public
    onlyRetailer() // check msg.sender belongs to RetailerRole
    shippedByCarParts_Distributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is ownerID
    {
      items[_upc].itemState = State.ReceivedByRetailer;
      emit ReceivedByRetailer(_upc);
  }

  /*
  12th step in supplychain
  Allows retailer to sell carparts
  */
  function sellItemByRetailer(uint _upc, uint _price) public
    onlyRetailer()  // check msg.sender belongs to RetailerRole
    receivedByRetailer(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is ownerID
    {
      items[_upc].itemState = State.ForSaleByRetailer;
      items[_upc].productPrice = _price;
      emit ForSaleByRetailer(_upc);
  }

  /*
  13th step in supplychain
  Allows customer to purchase carparts
  */
  function purchaseItemByCustomer(uint _upc) public payable
    onlyCustomer()  // check msg.sender belongs to CustomerRole
    forSaleByRetailer(_upc)
    paidEnough(items[_upc].productPrice)
    checkValue(_upc, msg.sender)
    {
      items[_upc].customerID = msg.sender;
      address payable ownerAddressPayable = _make_payable(items[_upc].retailerID);
      ownerAddressPayable.transfer(items[_upc].productPrice);
      items[_upc].ownerID = msg.sender;
      items[_upc].customerID = msg.sender;
      items[_upc].itemState = State.PurchasedByCustomer;
      itemsHistory[_upc].RTC = block.number;
    emit PurchasedByCustomer(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
    (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originCarParts_ManufacturerID,
    string memory  originFactoryName,
    string memory originFactoryInformation,
    string memory originFactoryLatitude,
    string memory originFactoryLongitude,
    uint productDate //,
   // uint productSplited
    )
    {
    // Assign values to the 8 parameters
    Item memory item = items[_upc];

    return
    (
      item.sku,
      item.upc,
      item.ownerID,
      item.originCarParts_ManufacturerID,
      item.originFactoryName,
      item.originFactoryInformation,
      item.originFactoryLatitude,
      item.originFactoryLongitude,
      item.productDate //,
      //item.productSplited
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
    (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string  memory productNotes,
    uint    productPrice,
    uint256 productDate,
    State   itemState,
    address CarParts_distributorID,
    address retailerID,
    address customerID
    )
    {
      // Assign values to the 9 parameters
    Item memory item = items[_upc];

    return
    (
      item.sku,
      item.upc,
      item.productID,
      item.productNotes,
      item.productPrice,
      item.productDate,
      item.itemState,
      item.CarParts_distributorID,
      item.retailerID,
      item.customerID
    );

  }

  // Define a function 'fetchItemHistory' that fetaches the data
  function fetchitemHistory(uint _upc) public view returns
    (
      uint blockCarParts_ManufacturerToCarParts_Distributor,
      uint blockCarParts_DistributorToRetailer,
      uint blockRetailerToCustomer
    )
    {
      // Assign value to the parameters
      Txblocks memory txblock = itemsHistory[_upc];
      return
      (
        txblock.FTD,
        txblock.DTR,
        txblock.RTC
      );

    }

  }
